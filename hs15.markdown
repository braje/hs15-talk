---
title: 'Haskell with Reveal'
subtitle: 'Using Ghcjs and/or Reflex in Reveal.js Presentations'
author: Timothy Braje
tags: [Haskell, functional programming, JavaScript, web, GHCJS]
theme: braje-white
width: 1280
height: 720
highlighting-css: false
css: ['css/hk-espresso.css', 'css/custom.css']
controls: false
slideNumber: true
---

# GHCJS

 * Covering
 * Some
 * Stuff

# Run Haskell

```{.ghcjs}
start ref = staticText ref (take 30 (show fibs) ++ "...")
---
fibs = 0 : 1 : zipWith (+) fibs (tail fibs)
```

# Run Haskell

```{.haskell}
start ref = staticText ref (take 30 (show fibs) ++ "...")
---
fibs = 0 : 1 : zipWith (+) fibs (tail fibs)
```

# Run Haskell

```{.haskell}
start ref = dynamicText ref "10" (show . (fibs!!) . read)
---
fibs = 0 : 1 : zipWith (+) fibs (tail fibs)
```

# Run Haskell

```{.ghcjs}
start ref = dynamicText ref "10" (show . (fibs!!) . read)
---
fibs = 0 : 1 : zipWith (+) fibs (tail fibs)
```

# Run Reflex

```{.reflex}
start :: MonadWidget t m => m ()
start = el "div" $ text "If you really have to ask..."
```
